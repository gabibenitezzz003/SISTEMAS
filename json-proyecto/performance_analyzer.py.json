{
    "archivo": "performance_analyzer.py",
    "ruta_completa": "C:\\Users\\gabib\\Desktop\\gestor_horarios_GSS-WEB\\performance_analyzer.py",
    "docstring_modulo": null,
    "contenido_completo": "import pandas as pd\nimport numpy as np\nfrom scipy import stats\nfrom sklearn.cluster import KMeans\n\nclass PerformanceAnalyzer:\n    def __init__(self, db_session):\n        self.session = db_session\n        \n    def analyze_employee_performance(self, employee_id, period):\n        \"\"\"Analiza el rendimiento detallado de un empleado\"\"\"\n        metrics = {\n            'attendance': self.calculate_attendance_score(employee_id, period),\n            'punctuality': self.analyze_punctuality(employee_id, period),\n            'shift_completion': self.analyze_shift_completion(employee_id, period),\n            'overtime_efficiency': self.calculate_overtime_efficiency(employee_id, period),\n            'adaptability': self.measure_adaptability(employee_id, period)\n        }\n        \n        recommendations = self.generate_recommendations(metrics)\n        trends = self.analyze_performance_trends(employee_id, period)\n        \n        return {\n            'metrics': metrics,\n            'recommendations': recommendations,\n            'trends': trends,\n            'overall_score': self.calculate_overall_score(metrics)\n        }\n        \n    def analyze_department_performance(self, department_id, period):\n        \"\"\"Analiza el rendimiento de un departamento completo\"\"\"\n        employees = self.get_department_employees(department_id)\n        \n        department_metrics = {\n            'overall_efficiency': self.calculate_department_efficiency(department_id, period),\n            'workload_distribution': self.analyze_workload_distribution(department_id, period),\n            'team_coordination': self.assess_team_coordination(department_id, period),\n            'resource_utilization': self.analyze_resource_utilization(department_id, period)\n        }\n        \n        return {\n            'metrics': department_metrics,\n            'top_performers': self.identify_top_performers(employees, period),\n            'improvement_areas': self.identify_improvement_areas(department_metrics),\n            'recommendations': self.generate_department_recommendations(department_metrics)\n        }\n        \n    def generate_performance_report(self, entity_id, period, report_type='employee'):\n        \"\"\"Genera un reporte detallado de rendimiento\"\"\"\n        if report_type == 'employee':\n            data = self.analyze_employee_performance(entity_id, period)\n        else:\n            data = self.analyze_department_performance(entity_id, period)\n            \n        visualizations = self.create_performance_visualizations(data)\n        insights = self.extract_key_insights(data)\n        \n        return {\n            'data': data,\n            'visualizations': visualizations,\n            'insights': insights,\n            'recommendations': self.generate_actionable_recommendations(data)\n        } ",
    "imports": [
        {
            "type": "import",
            "modules": [
                {
                    "module": "pandas",
                    "asname": "pd"
                }
            ],
            "lineno": 1
        },
        {
            "type": "import",
            "modules": [
                {
                    "module": "numpy",
                    "asname": "np"
                }
            ],
            "lineno": 2
        },
        {
            "type": "from",
            "module": "scipy",
            "level": 0,
            "names": [
                {
                    "name": "stats",
                    "asname": null
                }
            ],
            "lineno": 3
        },
        {
            "type": "from",
            "module": "sklearn.cluster",
            "level": 0,
            "names": [
                {
                    "name": "KMeans",
                    "asname": null
                }
            ],
            "lineno": 4
        }
    ],
    "clases": [
        {
            "nombre": "PerformanceAnalyzer",
            "lineno": 6,
            "docstring": null,
            "decoradores": [],
            "metodos": [
                {
                    "nombre": "__init__",
                    "lineno": 7,
                    "docstring": null,
                    "decoradores": [],
                    "argumentos": [
                        "self",
                        "db_session"
                    ]
                },
                {
                    "nombre": "analyze_employee_performance",
                    "lineno": 10,
                    "docstring": "Analiza el rendimiento detallado de un empleado",
                    "decoradores": [],
                    "argumentos": [
                        "self",
                        "employee_id",
                        "period"
                    ]
                },
                {
                    "nombre": "analyze_department_performance",
                    "lineno": 30,
                    "docstring": "Analiza el rendimiento de un departamento completo",
                    "decoradores": [],
                    "argumentos": [
                        "self",
                        "department_id",
                        "period"
                    ]
                },
                {
                    "nombre": "generate_performance_report",
                    "lineno": 48,
                    "docstring": "Genera un reporte detallado de rendimiento",
                    "decoradores": [],
                    "argumentos": [
                        "self",
                        "entity_id",
                        "period",
                        "report_type"
                    ]
                }
            ]
        }
    ],
    "funciones": [
        {
            "nombre": "__init__",
            "lineno": 7,
            "docstring": null,
            "decoradores": [],
            "argumentos": [
                "self",
                "db_session"
            ]
        },
        {
            "nombre": "analyze_employee_performance",
            "lineno": 10,
            "docstring": "Analiza el rendimiento detallado de un empleado",
            "decoradores": [],
            "argumentos": [
                "self",
                "employee_id",
                "period"
            ]
        },
        {
            "nombre": "analyze_department_performance",
            "lineno": 30,
            "docstring": "Analiza el rendimiento de un departamento completo",
            "decoradores": [],
            "argumentos": [
                "self",
                "department_id",
                "period"
            ]
        },
        {
            "nombre": "generate_performance_report",
            "lineno": 48,
            "docstring": "Genera un reporte detallado de rendimiento",
            "decoradores": [],
            "argumentos": [
                "self",
                "entity_id",
                "period",
                "report_type"
            ]
        }
    ],
    "asignaciones": [
        {
            "lineno": 8,
            "targets": [
                "self.session"
            ],
            "value": "db_session"
        },
        {
            "lineno": 12,
            "targets": [
                "metrics"
            ],
            "value": "{'attendance': self.calculate_attendance_score(employee_id, period), 'punctuality': self.analyze_punctuality(employee_id, period), 'shift_completion': self.analyze_shift_completion(employee_id, period), 'overtime_efficiency': self.calculate_overtime_efficiency(employee_id, period), 'adaptability': self.measure_adaptability(employee_id, period)}"
        },
        {
            "lineno": 20,
            "targets": [
                "recommendations"
            ],
            "value": "self.generate_recommendations(metrics)"
        },
        {
            "lineno": 21,
            "targets": [
                "trends"
            ],
            "value": "self.analyze_performance_trends(employee_id, period)"
        },
        {
            "lineno": 32,
            "targets": [
                "employees"
            ],
            "value": "self.get_department_employees(department_id)"
        },
        {
            "lineno": 34,
            "targets": [
                "department_metrics"
            ],
            "value": "{'overall_efficiency': self.calculate_department_efficiency(department_id, period), 'workload_distribution': self.analyze_workload_distribution(department_id, period), 'team_coordination': self.assess_team_coordination(department_id, period), 'resource_utilization': self.analyze_resource_utilization(department_id, period)}"
        },
        {
            "lineno": 51,
            "targets": [
                "data"
            ],
            "value": "self.analyze_employee_performance(entity_id, period)"
        },
        {
            "lineno": 53,
            "targets": [
                "data"
            ],
            "value": "self.analyze_department_performance(entity_id, period)"
        },
        {
            "lineno": 55,
            "targets": [
                "visualizations"
            ],
            "value": "self.create_performance_visualizations(data)"
        },
        {
            "lineno": 56,
            "targets": [
                "insights"
            ],
            "value": "self.extract_key_insights(data)"
        }
    ]
}